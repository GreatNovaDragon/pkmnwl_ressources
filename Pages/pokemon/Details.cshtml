@page
@model DetailsModel

@{
    ViewData["Title"] = "";
    var title = Model.Pokemon.Name_DE;

    if (title == null)
    {
        title += Model.Pokemon.Name;
    }

    if (!Model.Pokemon.Form.IsNullOrEmpty())
    {
        title += $" ({Model.Pokemon.Form})";
    }


    ViewData["Title"] = title;

    string headercolor;
    if (Model.Pokemon.Type2 != null)
    {
        headercolor = $"linear-gradient(135deg, {Helpers.TypeToColor(Model.Pokemon.Type1)} 0%, {Helpers.TypeToColor(Model.Pokemon.Type2)} 100%); ";
    }
    else
    {
        headercolor = Helpers.TypeToColor(Model.Pokemon.Type1);
    }

    ViewData["Type1"] = Model.Pokemon.Type1.ID;
    ViewData["Type2"] = Model.Pokemon.Type2?.ID;

    ViewData["HeaderColor"] = headercolor;
}


<div class="w3-cell-row">
    <div class="w3-container w3-quarter w3-cell">
        <img src="@Html.Raw(Model.Pokemon.ImageLink)" class="w3-image"/>
    </div>
    <div class="w3-container w3-quarter w3-cell">
        <h2>Fähigkeiten</h2>
        @foreach (var a in Model.Pokemon.Abilities)
        {
            <h3>@Html.Raw($"{a.Name_DE}")</h3>
            @Html.Raw(Markdown.Parse(a.ShortEffect))
        }
    </div>

    <div class="w3-container w3-quarter w3-cell">
        @{
            var originalColorlist = new List<(int r, int g, int b, int pos)>();
            originalColorlist.Add((158, 194, 50, 0));
            originalColorlist.Add((192, 198, 37, 21));
            originalColorlist.Add((234, 203, 22, 41));
            originalColorlist.Add((255, 205, 15, 54));
            originalColorlist.Add((235, 167, 92, 60));
            originalColorlist.Add((228, 89, 15, 65));
            originalColorlist.Add((209, 19, 42, 72));
            originalColorlist.Add((121, 6, 5, 91));
            originalColorlist.Add((0, 0, 0, 100));

            var gradient = new List<(int r, int g, int b)>();
            for (var i = 0; i < originalColorlist.Count - 1; i++)
            {
                var rMax = originalColorlist[i + 1].r;
                var rMin = originalColorlist[i].r;

                var gMin = originalColorlist[i].g;
                var gMax = originalColorlist[i + 1].g;

                var bMin = originalColorlist[i].b;
                var bMax = originalColorlist[i + 1].b;

                var size = originalColorlist[i + 1].pos - originalColorlist[i].pos;
                for (var y = 0; y < size; y++)
                {
                    var rAverage = rMin + (rMax - rMin) * y / size;
                    var gAverage = gMin + (gMax - gMin) * y / size;
                    var bAverage = bMin + (bMax - bMin) * y / size;
                    gradient.Add((rAverage, gAverage, bAverage));
                }
            }


            (string Stat, int y, string bg)[] stats =
            [
                ("Gesundheit", Model.Pokemon.HEALTH, "rgb(253,0,0)"),
                ("Angriff", Model.Pokemon.ATK, "rgb(238,127,48)"),
                ("Verteidigung", Model.Pokemon.DEF, "rgb(246,207,48)"),
                ("Spezial-Angriff", Model.Pokemon.SP_ATK, "rgb(104,143,238)"),
                ("Spezial-Verteidigung", Model.Pokemon.SP_DEF, "rgb(119,199,80)"),
                ("Initiative", Model.Pokemon.SPEED, "rgb(246,88,135)")
            ];
            foreach (var s in stats)
            {
                var res = 25;
                if (s.Stat == "Gesundheit") res = 50;


                <div> @Html.Raw($"{s.Stat}: {s.y}")</div>

                <div class="progress-segment">
                    @for (var i = 1; i < res; i++)
                    {
                        var style = i > s.y ? "" : $"style=\"background-color: rgb({gradient[i * 100 / res + 1].r} , {gradient[i * 100 / res + 1].g},{gradient[i * 100 / res + 1].b});\" ";
                        @Html.Raw($"<div class=\"item\" {style}>&nbsp;</div>")
                    }


                </div>
            }
        }

    </div>

    <div class="w3-container w3-quarter">
        @if (Model.DamageMultiplier.Where(v => v.Item2 == 0).Count() != 0)
        {
            <div>
                <p>Erhält Null Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 0))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Where(v => v.Item2 == 25).Count() != 0)
        {
            <div>
                <p>Erhält 0.25x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 25))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Where(v => v.Item2 == 50).Count() != 0)
        {
            <div>
                <p>Erhält 0.5x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 50))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Where(v => v.Item2 == 200).Count() != 0)
        {
            <div>
                <p>Erhält 2x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 200))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Where(v => v.Item2 == 400).Count() != 0)
        {
            <div>
                <p>Erhält 4x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 400))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }

    </div>


</div>


<h2>Erlernbare Angriffe</h2>


<div class="w3-row-padding">
    <a href="javascript:void(0)" onclick="openCity(event, 'LevelUp');">
        <div class="w3-col tablink w3-bottombar w3-hover-light-grey w3-quarter  w3-border-red">Level Up</div>
    </a>
    <a href="javascript:void(0)" onclick="openCity(event, 'TM');">
        <div class=" w3-col tablink w3-bottombar w3-quarter w3-hover-light-grey ">TM</div>
    </a>
    <a href="javascript:void(0)" onclick="openCity(event, 'Tutor');">
        <div class="w3-col tablink w3-bottombar w3-quarter w3-hover-light-grey ">Tutor</div>
    </a>
    <a href="javascript:void(0)" onclick="openCity(event, 'Egg');">
        <div class="w3-col tablink w3-bottombar w3-quarter w3-hover-light-grey">Ei</div>
    </a>
</div>


<div id="LevelUp" class="w3-container city" style=" display: flex; flex-wrap: wrap ;  justify-content: space-evenly">
    @foreach (var move in Model.Learnsets.Where(e => e.how == "level-up").OrderBy(e => e.move.Name_DE).OrderBy(m => m.level))
    {
        @Html.Partial("moves/move", move)
    }
</div>


<div id="TM" class="w3-container city" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">
    @foreach (var move in Model.Learnsets.Where(e => e.how == "machine"))
    {
        @Html.Partial("moves/move", move)
    }
</div>
<div id="Tutor" class="w3-container city" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">

    @foreach (var move in Model.Learnsets.Where(e => !new string[3] { "level-up", "machine", "egg" }.Contains(e.how)).OrderBy(m => m.move.Name_DE).OrderBy(m => m.how))
    {
        @Html.Partial("moves/move", move)
    }
</div>
<div id="Egg" class="w3-container city" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">

    @foreach (var move in Model.Learnsets.Where(e => e.how == "egg").OrderBy(m => m.move.Name_DE))
    {
        @Html.Partial("moves/move", move)
    }
</div>

<script>
function openCity(evt, cityName) {
  var i, x, tablinks;
  x = document.getElementsByClassName("city");
  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablink");
  for (i = 0; i < x.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" w3-border-red", "");
  }
  document.getElementById(cityName).style.display = "flex";
  evt.currentTarget.firstElementChild.className += " w3-border-red";
}
</script>

<a asp-page="./Edit" asp-route-id="@Model.Pokemon?.ID">Edit</a> |
<a asp - page="./Index"> Back to List</a >