@page
@model DetailsModel

@{
    ViewData["Title"] = "";
    var title = Model.Pokemon.Name_DE ?? Model.Pokemon.Name;

    if (!string.IsNullOrEmpty(Model.Pokemon.Form_DE))
    {
        title += $" ({Model.Pokemon.Form_DE})";
    }
    else if (!string.IsNullOrEmpty(Model.Pokemon.Form))
    {
        title += $" ({Model.Pokemon.Form_DE})";
    }


    ViewData["Title"] = title;

    var headercolor = Model.Pokemon.Type2 != null ? $"linear-gradient(135deg, {Helpers.TypeToColor(Model.Pokemon.Type1)} 0%, {Helpers.TypeToColor(Model.Pokemon.Type2)} 100%); " : Helpers.TypeToColor(Model.Pokemon.Type1);

    ViewData["Type1"] = Model.Pokemon.Type1.ID;
    ViewData["Type2"] = Model.Pokemon.Type2?.ID;

    ViewData["HeaderColor"] = headercolor;
}

<div class="d-inline-flex">
    <div>
        <img src="@Html.Raw(Model.Pokemon.ImageLink)" class="img-fluid rounded-start" alt="...">
        <div class="d-inline-flex">
            <div class="w-50">
                <img src="/icons/type/normal/DE/SV/@Html.Raw($"{Model.Pokemon.Type1.ID}.png")"/>
            </div>
            <div class="w-50">
                @if (Model.Pokemon.Type2 != null)
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{Model.Pokemon.Type2.ID}.png")"/>
                }
            </div>
        </div>
    </div>
    <div class="container">
        <h3>Fähigkeiten</h3>
        @foreach (var a in Model.Pokemon.Abilities)
        {
            <h4>@Html.Raw($"{a.Name_DE}")</h4>
            @Html.Raw(Markdown.Parse(a.ShortEffect))
        }
    </div>

</div>

<div class="d-inline-flex">
    <div>
        @{
            var originalColorlist = new List<(int r, int g, int b, int pos)>
            {
                (158, 194, 50, 0),
                (192, 198, 37, 21),
                (234, 203, 22, 41),
                (255, 205, 15, 54),
                (235, 167, 92, 60),
                (228, 89, 15, 65),
                (209, 19, 42, 72),
                (121, 6, 5, 91),
                (0, 0, 0, 100)
            };

            var gradient = new List<(int r, int g, int b)>();
            for (var i = 0; i < originalColorlist.Count - 1; i++)
            {
                var rMax = originalColorlist[i + 1].r;
                var rMin = originalColorlist[i].r;

                var gMin = originalColorlist[i].g;
                var gMax = originalColorlist[i + 1].g;

                var bMin = originalColorlist[i].b;
                var bMax = originalColorlist[i + 1].b;

                var size = originalColorlist[i + 1].pos - originalColorlist[i].pos;
                for (var y = 0; y < size; y++)
                {
                    var rAverage = rMin + (rMax - rMin) * y / size;
                    var gAverage = gMin + (gMax - gMin) * y / size;
                    var bAverage = bMin + (bMax - bMin) * y / size;
                    gradient.Add((rAverage, gAverage, bAverage));
                }
            }


            (string Stat, int y)[] stats =
            [
                ("Gesundheit", Model.Pokemon.HEALTH),
                ("Angriff", Model.Pokemon.ATK),
                ("Verteidigung", Model.Pokemon.DEF),
                ("Spezial-Angriff", Model.Pokemon.SP_ATK),
                ("Spezial-Verteidigung", Model.Pokemon.SP_DEF),
                ("Initiative", Model.Pokemon.SPEED)
            ];
            foreach (var s in stats)
            {
                var res = 25;
                if (s.Stat == "Gesundheit") res = 50;


                <div> @Html.Raw($"{s.Stat}: {s.y}")</div>

                <div class="progress-segment">
                    @for (var i = 1; i <= res; i++)
                    {
                        var style = i > s.y ? "" : $"style=\"background-color: rgb({gradient[i * 100 / res + 1].r} , {gradient[i * 100 / res + 1].g},{gradient[i * 100 / res + 1].b});\" ";
                        @Html.Raw($"<div class=\"item\" {style}>&nbsp;</div>")
                    }


                </div>
            }
        }

    </div>

    <div class="container w-50">
        @if (Model.DamageMultiplier.Count(v => v.Item2 == 0) != 0)
        {
            <div>
                <p>Erhält Null Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 0))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Count(v => v.Item2 == 25) != 0)
        {
            <div>
                <p>Erhält 0.25x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 25))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Count(v => v.Item2 == 50) != 0)
        {
            <div>
                <p>Erhält 0.5x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 50))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Count(v => v.Item2 == 200) != 0)
        {
            <div>
                <p>Erhält 2x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 200))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }
        @if (Model.DamageMultiplier.Count(v => v.Item2 == 400) != 0)
        {
            <div>
                <p>Erhält 4x Schaden von</p>
                @foreach (var v in Model.DamageMultiplier.Where(v => v.Item2 == 400))
                {
                    <img src="/icons/type/normal/DE/SV/@Html.Raw($"{v.Item1.ID}.png")"/>
                }
            </div>
        }

    </div>
</div>

<h3>Erlernbare Angriffe</h3>


<div>
    <nav>
        <div class="nav nav-tabs mb-3" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-level-tab" data-bs-toggle="tab" data-bs-target="#nav-level" type="button" role="tab" aria-controls="nav-level" aria-selected="true">Level</button>
            <button class="nav-link" id="nav-tm-tab" data-bs-toggle="tab" data-bs-target="#nav-tm" type="button" role="tab" aria-controls="nav-tm" aria-selected="false">TM</button>
            <button class="nav-link" id="nav-tutor-tab" data-bs-toggle="tab" data-bs-target="#nav-tutor" type="button" role="tab" aria-controls="nav-tutor" aria-selected="false">Tutor</button>
            <button class="nav-link" id="nav-egg-tab" data-bs-toggle="tab" data-bs-target="#nav-egg" type="button" role="tab" aria-controls="nav-egg" aria-selected="false">Ei</button>

        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade active show" id="nav-level" role="tabpanel" aria-labelledby="nav-level-tab">

            <div class="d-inline-flex flex-wrap justify-content-around">
                @foreach (var move in Model.Learnsets.Where(e => e.how == "level-up").OrderBy(e => e.move.Name_DE).ThenBy(m => m.level))
                {
                    @Html.Partial("moves/move", move)
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-tm" role="tabpanel" aria-labelledby="nav-tm-tab">
            <div class="d-inline-flex flex-wrap">

                @foreach (var move in Model.Learnsets.Where(e => e.how == "machine"))
                {
                    @Html.Partial("moves/move", move)
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-tutor" role="tabpanel" aria-labelledby="nav-tutor-tab">
            <div class="d-inline-flex flex-wrap">

                @foreach (var move in Model.Learnsets.Where(e => !new[] { "level-up", "machine", "egg" }.Contains(e.how)).OrderBy(m => m.move.Name_DE).ThenBy(m => m.how))
                {
                    @Html.Partial("moves/move", move)
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-egg" role="tabpanel" aria-labelledby="nav-egg-tab">
            <div class="d-inline-flex flex-wrap">

                @foreach (var move in Model.Learnsets.Where(e => e.how == "egg").OrderBy(m => m.move.Name_DE))
                {
                    @Html.Partial("moves/move", move)
                }
            </div>
        </div>
    </div>
</div>