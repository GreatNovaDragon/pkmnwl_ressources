@page
@using Microsoft.IdentityModel.Tokens
@using Westwind.AspNetCore.Markdown
@model DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>
    @Html.DisplayFor(modelItem => modelItem.Pokemon.Name) / @Html.DisplayFor(modelItem => modelItem.Pokemon.Name_DE)
    @if (!Model.Pokemon.Form.IsNullOrEmpty())
    {
        @Html.Raw($"({Model.Pokemon.Form})")
    }
</h1>

<div class="w3-cell-row">
    <div class="w3-container w3-cell">
        <h3>Types</h3>
        @Html.DisplayFor(modelItem => modelItem.Pokemon.Type1.Name) /
        @Html.DisplayFor(modelItem => modelItem.Pokemon.Type2!.Name)


        <h2>Abilities</h2>

        @foreach (var a in Model.Pokemon.Abilities)
        {
            <h3>@Html.Raw($"{a.Name}/{a.Name_DE}")</h3>
            @Html.Raw(Markdown.Parse(a.Effect))
        }
    </div>
    <div class="w3-container w3-cell">
        <img src="@Html.Raw(Model.Pokemon.ImageLink)"/>
    </div>
    <div class="w3-container w3-cell">
        <canvas id="myChart"></canvas>


        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
           const ctx = document.getElementById('myChart');
         
           new Chart(ctx, {
             type: 'radar',
             data: {
               labels: ['Vitality @Html.Raw(Model.Pokemon.HEALTH)/15', 'ATK @Html.Raw(Model.Pokemon.ATK)/15', 'DEF @Html.Raw(Model.Pokemon.DEF)/15', 'SpATK @Html.Raw(Model.Pokemon.SP_ATK)/15' , 'SpDEF @Html.Raw(Model.Pokemon.SP_DEF)/15', 'Speed @Html.Raw(Model.Pokemon.SPEED)/15'],
               datasets: [{
                 label: '',
                 data: [@Html.Raw(Model.Pokemon.HEALTH), @Html.Raw(Model.Pokemon.ATK), @Html.Raw(Model.Pokemon.DEF), @Html.Raw(Model.Pokemon.SP_ATK), @Html.Raw(Model.Pokemon.SP_DEF), @Html.Raw(Model.Pokemon.SPEED)],
                 borderWidth: 1
               }]
             },
             options: {
               scales: {
                 r: {
                   min: 0,
                   max: 15,
                   pointLabels: {
                       font: {size: 15}
                   }
                 }
               }
             }
           });
         </script>
    </div>


</div>


<h2>Learnable Moves</h2>


<div class="w3-row">
    <a href="javascript:void(0)" onclick="openCity(event, 'LevelUp');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding  w3-border-red">Level Up</div>
    </a>
    <a href="javascript:void(0)" onclick="openCity(event, 'TM');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding">TM</div>
    </a>
    <a href="javascript:void(0)" onclick="openCity(event, 'TutorEgg');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding">Tutor and EggMoves</div>
    </a>
</div>


<div id="LevelUp" class="w3-container city" style=" display: flex; flex-wrap: wrap ;  justify-content: space-evenly">
    @foreach (var move in Model.Learnsets.Where(e => e.level != 0).OrderBy(e => e.level))
    {
        <div class="w3-container w3-cell w3-mobile" style="flex:  1 1 33.333333%;">
            <div class="w3-card">
                <header class="w3-container w3-blue">
                    <h3>
                        <a href="/moves/Details?id={move.move.ID}"> @Html.Raw(move.move.Name)/@Html.Raw(move.move.Name_DE) </a>
                    </h3>
                </header>

                <div class="w3-container">
                    <dl>
                        <dt>
                            Learned via
                        </dt>
                        <dd>@Html.Raw(move.how)</dd>
                        <dt>Learned at Level</dt>
                        <dd>@Html.Raw(move.level)</dd>
                        <dt>Move Class</dt>
                        <dd>
                            @Html.Raw(move.move.MoveClass.Name)/@Html.Raw(move.move.MoveClass.Name_DE)
                        </dd>
                        <dt>Move Type</dt>
                        <dd>@Html.Raw(move.move.type.Name)/@Html.Raw(move.move.type.Name_DE)</dd>


                        @if (!move.move.DamageDice.IsNullOrEmpty())
                        {
                            <dt>Damage Dice</dt>
                            <dd>@Html.Raw(move.move.DamageDice)</dd>
                        }
                        else
                        {
                            <dt>&nbsp;</dt>
                            <dd>&nbsp;</dd>
                        }
                    </dl>
                </div>


                <div class="w3-container w3-light-blue">
                    <h4>Effect</h4>
                </div>
                <div class="w3-container">
                    @Html.Raw(Markdown.Parse(move.move.Effect))
                </div>
            </div>
        </div>
    }
</div>


<div id="TM" class="w3-container city" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">
    @foreach (var move in Model.Learnsets.Where(e => e.how == "machine"))
    {
        <div class="w3-container w3-cell w3-mobile" style="flex:  1 1 33.333333%;">
            <div class="w3-card">
                <header class="w3-container w3-blue">
                    <h3>
                        <a href="/moves/Details?id={move.move.ID}"> @Html.Raw(move.move.Name)/@Html.Raw(move.move.Name_DE) </a>
                    </h3>
                </header>

                <div class="w3-container">
                    <dl>
                        <dt>
                            Learned via
                        </dt>
                        <dd>@Html.Raw(move.how)</dd>
                        <dt>Learned at Level</dt>
                        <dd>@Html.Raw(move.level)</dd>
                        <dt>Move Class</dt>
                        <dd>
                            @Html.Raw(move.move.MoveClass.Name)/@Html.Raw(move.move.MoveClass.Name_DE)
                        </dd>
                        <dt>Move Type</dt>
                        <dd>@Html.Raw(move.move.type.Name)/@Html.Raw(move.move.type.Name_DE)</dd>


                        @if (!move.move.DamageDice.IsNullOrEmpty())
                        {
                            <dt>Damage Dice</dt>
                            <dd>@Html.Raw(move.move.DamageDice)</dd>
                        }
                        else
                        {
                            <dt>&nbsp;</dt>
                            <dd>&nbsp;</dd>
                        }
                    </dl>
                </div>


                <div class="w3-container w3-light-blue">
                    <h4>Effect</h4>
                </div>
                <div class="w3-container">
                    @Html.Raw(Markdown.Parse(move.move.Effect))
                </div>
            </div>
        </div>
    }
</div>
<div id="TutorEgg" class="w3-container city" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">

    @foreach (var move in Model.Learnsets.Where(e => !new List<string> { "machine", "level-up" }.Contains(e.how)).OrderBy(m => m.how))
    {
        <div class="w3-container w3-cell w3-mobile" style="flex:  1 1 33.333333%;">
            <div class="w3-card">
                <header class="w3-container w3-blue">
                    <h3>
                        <a href="/moves/Details?id={move.move.ID}"> @Html.Raw(move.move.Name)/@Html.Raw(move.move.Name_DE) </a>
                    </h3>
                </header>

                <div class="w3-container">
                    <dl>
                        <dt>
                            Learned via
                        </dt>
                        <dd>@Html.Raw(move.how)</dd>
                        <dt>Learned at Level</dt>
                        <dd>@Html.Raw(move.level)</dd>
                        <dt>Move Class</dt>
                        <dd>
                            @Html.Raw(move.move.MoveClass.Name)/@Html.Raw(move.move.MoveClass.Name_DE)
                        </dd>
                        <dt>Move Type</dt>
                        <dd>@Html.Raw(move.move.type.Name)/@Html.Raw(move.move.type.Name_DE)</dd>


                        @if (!move.move.DamageDice.IsNullOrEmpty())
                        {
                            <dt>Damage Dice</dt>
                            <dd>@Html.Raw(move.move.DamageDice)</dd>
                        }
                        else
                        {
                            <dt>&nbsp;</dt>
                            <dd>&nbsp;</dd>
                        }
                    </dl>
                </div>


                <div class="w3-container w3-light-blue">
                    <h4>Effect</h4>
                </div>
                <div class="w3-container">
                    @Html.Raw(Markdown.Parse(move.move.Effect))
                </div>
            </div>
        </div>
    }
</div>

<script>
function openCity(evt, cityName) {
  var i, x, tablinks;
  x = document.getElementsByClassName("city");
  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablink");
  for (i = 0; i < x.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" w3-border-red", "");
  }
  document.getElementById(cityName).style.display = "flex";
  evt.currentTarget.firstElementChild.className += " w3-border-red";
}
</script>

<a asp-page="./Edit" asp-route-id="@Model.Pokemon?.ID">Edit</a> |
<a asp - page="./Index"> Back to List</a >