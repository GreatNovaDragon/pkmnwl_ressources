@page
@using Microsoft.IdentityModel.Tokens
@using Westwind.AspNetCore.Markdown
@model DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>
    @Html.DisplayFor(modelItem => modelItem.Pokemon.Name) / @Html.DisplayFor(modelItem => modelItem.Pokemon.Name_DE)
    @if (!Model.Pokemon.Form.IsNullOrEmpty())
    {
        @Html.Raw($"({Model.Pokemon.Form})")
    }
</h1>

<div style="display: flex; justify-content: space-around">
    <div>
        <h3>Types</h3>
        @Html.DisplayFor(modelItem => modelItem.Pokemon.Type1.Name) /
        @Html.DisplayFor(modelItem => modelItem.Pokemon.Type2!.Name)


        <h2>Abilities</h2>
        
            @foreach (var a in Model.Pokemon.Abilities)
            {
                <h3>@Html.Raw($"{a.Name}/{a.Name_DE}")</h3>
                @Html.Raw(Markdown.Parse(a.Effect))
            }
    </div>
    <div>
        <img src="@Html.Raw(Model.Pokemon.ImageLink)"/>
    </div>
    <div>
        <canvas id="myChart" style=" filter: invert(1) hue-rotate(180deg);"></canvas>


        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
           const ctx = document.getElementById('myChart');
         
           new Chart(ctx, {
             type: 'radar',
             data: {
               labels: ['Vitality', 'ATK', 'DEF', 'SpATK', 'SpDEF', 'Speed'],
               datasets: [{
                 label: '',
                 data: [@Html.Raw(Model.Pokemon.HEALTH), @Html.Raw(Model.Pokemon.ATK), @Html.Raw(Model.Pokemon.DEF), @Html.Raw(Model.Pokemon.SP_ATK), @Html.Raw(Model.Pokemon.SP_DEF), @Html.Raw(Model.Pokemon.SPEED)],
                 borderWidth: 1
               }]
             },
             options: {
               scales: {
                 r: {
                   min: 0,
                   max: 15,
                 }
               }
             }
           });
         </script>
    </div>


</div>


<h2>Learnable Moves</h2>

<div class="w3-bar w3-black">
    <button class="w3-bar-item w3-button" onclick="openLearnmethod('LevelUp')">Level-up</button>
    <button class="w3-bar-item w3-button" onclick="openLearnmethod('TM')">TM</button>
    <button class="w3-bar-item w3-button" onclick="openLearnmethod('TutorEgg')">Tutor and EggMoves</button>
</div>


<div id="LevelUp" class="learnmethod" style="; display: flex; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">
    @foreach (var move in Model.Learnsets.Where(e => e.level != 0).OrderBy(e => e.level))
    {
        @Html.Raw(Helpers.MoveSetRenderer(move))
        ;
    }
</div>
<div id="TM" class="learnmethod" style="display:none; flex-wrap: wrap ; flex:  1 1 0px ; justify-content: space-around">
    @foreach (var move in Model.Learnsets.Where(e => e.how == "machine"))
    {
        @Html.Raw(Helpers.MoveSetRenderer(move))
        ;
    }
</div>
<div id="TutorEgg" class="learnmethod" style="display:none; flex-wrap: wrap ; flex:  1 1 0px; justify-content: space-around">

    @foreach (var move in Model.Learnsets.Where(e => !new List<string> { "machine", "level-up" }.Contains(e.how)).OrderBy(m => m.how))
    {
        @Html.Raw(Helpers.MoveSetRenderer(move))
        ;
    }
</div>

<script>
function openLearnmethod(cityName) {
  var i;
  var x = document.getElementsByClassName("learnmethod");
  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
  document.getElementById(cityName).style.display = "flex";
}
</script>

<a asp-page="./Edit" asp-route-id="@Model.Pokemon?.ID">Edit</a> |
<a asp-page="./Index">Back to List</a>